'------------------------------------------------------------------------------
' CacheProvider version: 2014.2.0.336
'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.8009
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace User
    
    '''<summary>
    '''Projection of class User.Fax
    '''</summary>
    Partial Public Class Fax
        Inherits InterSystems.Data.CacheTypes.CachePersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "User.Fax"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(16)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(2)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("User.Fax", GetType(Fax))
            
            User.Fax.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("memo", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518))
            User.Fax.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("pic", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tBinStream, 35621))
            
            User.Fax.CheckSumMethodDict.Add("%ComposeOid", 25785)
            User.Fax.CheckSumMethodDict.Add("%DeleteExtent", 56782)
            User.Fax.CheckSumMethodDict.Add("%IsA", 40977)
            User.Fax.CheckSumMethodDict.Add("%ObjectIsNull", 52396)
            User.Fax.CheckSumMethodDict.Add("%SaveIndices", 30436)
            User.Fax.CheckSumMethodDict.Add("IDKEYDelete", 46328)
            User.Fax.CheckSumMethodDict.Add("IDKEYExists", 13237)
            User.Fax.CheckSumMethodDict.Add("IDKEYOpen", 46726)
            User.Fax.CheckSumMethodDict.Add("memoDisplayToLogical", 59650)
            User.Fax.CheckSumMethodDict.Add("memoIsValid", 4756)
            User.Fax.CheckSumMethodDict.Add("memoLogicalToDisplay", 59650)
            User.Fax.CheckSumMethodDict.Add("picGetObjectId", 4555)
            User.Fax.CheckSumMethodDict.Add("picIsValid", 30030)
            User.Fax.CheckSumMethodDict.Add("picSet", 46367)
            User.Fax.CheckSumMethodDict.Add("picSetObject", 15000)
            User.Fax.CheckSumMethodDict.Add("picSetObjectId", 27957)
            
            User.Fax.CheckSumQueryDict.Add("Extent", 19893)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, User.Fax.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            MyBase.New
            Me.Init(conn, User.Fax.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property memo
        '''</summary>
        Public Overridable Property memo() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString)
                        Me.GetPropertyS("memo", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("memo", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property pic
        '''</summary>
        Public Overridable Property pic() As InterSystems.Data.CacheTypes.CacheBinaryStream
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(InterSystems.Data.CacheTypes.CacheBinaryStream))
                        Me.GetPropertyS("pic", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,InterSystems.Data.CacheTypes.CacheBinaryStream)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("pic", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method %ComposeOid
        '''</summary>
        Public Shared Sub SysComposeOid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid)
                    mtdSignature.Add(id, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "%ComposeOid", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method %DeleteExtent
        '''</summary>
        Public Shared Function SysDeleteExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal concurrency As System.Nullable(Of Long), ByRef deletecount As String, ByRef instancecount As String, ByVal pInitializeExtent As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(deletecount, true)
                    mtdSignature.Add(instancecount, true)
                    mtdSignature.Add(pInitializeExtent, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "%DeleteExtent", mtdSignature)
                    deletecount = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    instancecount = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method %IsA
        '''</summary>
        Public Shared Function SysIsA(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal isclass As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt)
                    mtdSignature.Add(isclass, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "%IsA", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method %ObjectIsNull
        '''</summary>
        Public Shared Function SysObjectIsNull(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal pOID() As Byte) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool)
                    mtdSignature.Add(pOID, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "%ObjectIsNull", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method %SaveIndices
        '''</summary>
        Public Shared Function SysSaveIndices(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal pStartId As String, ByVal pEndId As String, ByVal lockExtent As System.Nullable(Of Boolean)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(pStartId, false)
                    mtdSignature.Add(pEndId, false)
                    mtdSignature.Add(lockExtent, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "%SaveIndices", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(User.Fax))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,User.Fax)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method memoDisplayToLogical
        '''</summary>
        Public Shared Function memoDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "memoDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method memoIsValid
        '''</summary>
        Public Shared Function memoIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(_argument1, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "memoIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method memoLogicalToDisplay
        '''</summary>
        Public Shared Function memoLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "memoLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method picGetObjectId
        '''</summary>
        Public Overridable Function picGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("picGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method picIsValid
        '''</summary>
        Public Shared Function picIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(value, false)
                    User.Fax.RunClassMethodS(conn, User.Fax.ServerClassName, "picIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method picSet
        '''</summary>
        Public Overridable Function picSet(ByVal newvalue As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("picSet", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method picSetObject
        '''</summary>
        Public Overridable Function picSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("picSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method picSetObjectId
        '''</summary>
        Public Overridable Function picSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("picSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of query Extent
        '''</summary>
        Public Shared Function Extent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheClient.CacheCommand
            Dim cmd As InterSystems.Data.CacheClient.CacheCommand = New InterSystems.Data.CacheClient.CacheCommand("{ call SQLUser.Fax_Extent}", conn)
            Return cmd
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax)),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, timeout, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, GetType(User.Fax), propertyPaths, status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, timeout, GetType(User.Fax), propertyPaths, status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax), propertyPaths),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax)),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, timeout, GetType(User.Fax), status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, GetType(User.Fax), propertyPaths, status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, concurrency, timeout, GetType(User.Fax), propertyPaths, status),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As User.Fax
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(User.Fax.ServerClassName, id, GetType(User.Fax), propertyPaths),User.Fax)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return User.Fax.ExistsIdInternal(conn, User.Fax.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As InterSystems.Data.CacheTypes.CacheStatus
            Return User.Fax.DeleteIdInternal(conn, User.Fax.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheTypes.CacheStatus
            Return User.Fax.KillExtentInternal(conn, User.Fax.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(User.Fax.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            User.Fax.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Dim metaInfo As InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(User.Fax.ServerClassName)
            If metaInfo.Validate(User.Fax.ClassCheckSum, User.Fax.PropertyInfoColn, User.Fax.CheckSumMethodDict, User.Fax.CheckSumQueryDict, User.Fax.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            User.Fax.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (User.Fax.AllPropertiesInfoColn) Is Nothing) Then
                Return User.Fax.AllPropertiesInfoColn
            End If
            User.Fax.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(User.Fax.PropertyInfoColn)
            Return User.Fax.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return User.Fax.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace
